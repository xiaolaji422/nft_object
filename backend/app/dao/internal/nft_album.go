// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// NftAlbumDao is the manager for logic model data accessing and custom defined data operations functions management.
type NftAlbumDao struct {
	gmvc.M                 // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      nftAlbumColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB          // DB is the raw underlying database management object.
	Table  string          // Table is the underlying table name of the DAO.
}

// NftAlbumColumns defines and stores column names for table t_nft_album.
type nftAlbumColumns struct {
	Id          string // ID
	Platform    string // 平台
	OriginalId  string // 原始的nft的id
	Name        string // 专辑名称
	CoverPic    string // 封面
	Description string // 描述
	OnSale      string // 是否在售
	OnSaleTime  string // 发售时间
	SellLimit   string // 发售总量
	CreateTime  string // 创建时间
	UpdateTime  string // 更新时间
	Enabled     string // 状态描述, 1: 正常使用，0: 删除
}

// NewNftAlbumDao creates and returns a new DAO object for table data access.
func NewNftAlbumDao() *NftAlbumDao {
	columns := nftAlbumColumns{
		Id:          "id",
		Platform:    "platform",
		OriginalId:  "original_id",
		Name:        "name",
		CoverPic:    "cover_pic",
		Description: "description",
		OnSale:      "on_sale",
		OnSaleTime:  "on_sale_time",
		SellLimit:   "sell_limit",
		CreateTime:  "create_time",
		UpdateTime:  "update_time",
		Enabled:     "enabled",
	}
	return &NftAlbumDao{
		C:     columns,
		M:     g.DB("default").Model("t_nft_album").Safe(),
		DB:    g.DB("default"),
		Table: "t_nft_album",
	}
}
